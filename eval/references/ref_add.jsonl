{
	"question": "Create very simple smart contract which adds 2 to field state 1.",
	"code": "import { Field, SmartContract, state, State, method } from 'o1js';\n\n/**\n * Basic Example\n * See https://docs.minaprotocol.com/zkapps for more info.\n *\n * The Add contract initializes the state variable 'num' to be a Field(1) value by default when deployed.\n * When the 'update' method is called, the Add contract adds Field(2) to its 'num' contract state.\n *\n * This file is safe to delete and replace with your own contract.\n */\nexport class Add extends SmartContract {\n @state(Field) num = State<Field>();\n\n init() {\n super.init();\n this.num.set(Field(1));\n }\n\n @method update() {\n const currentState = this.num.getAndRequireEquals();\n const newState = currentState.add(2);\n this.num.set(newState);\n }\n}",
	"test": "import { Add } from './Add';\nimport { Field, Mina, PrivateKey, PublicKey, AccountUpdate } from 'o1js';\n\n/*\n * This file specifies how to test the `Add` example smart contract. It is safe to delete this file and replace\n * with your own tests.\n *\n * See https://docs.minaprotocol.com/zkapps for more info.\n */\n\nlet proofsEnabled = false;\n\ndescribe('Add', () => {\n let deployerAccount: PublicKey,\n deployerKey: PrivateKey,\n senderAccount: PublicKey,\n senderKey: PrivateKey,\n zkAppAddress: PublicKey,\n zkAppPrivateKey: PrivateKey,\n zkApp: Add;\n\n beforeAll(async () => {\n if (proofsEnabled) await Add.compile();\n });\n\n beforeEach(() => {\n const Local = Mina.LocalBlockchain({ proofsEnabled });\n Mina.setActiveInstance(Local);\n ({ privateKey: deployerKey, publicKey: deployerAccount } =\n Local.testAccounts[0]);\n ({ privateKey: senderKey, publicKey: senderAccount } =\n Local.testAccounts[1]);\n zkAppPrivateKey = PrivateKey.random();\n zkAppAddress = zkAppPrivateKey.toPublicKey();\n zkApp = new Add(zkAppAddress);\n });\n\n async function localDeploy() {\n const txn = await Mina.transaction(deployerAccount, () => {\n AccountUpdate.fundNewAccount(deployerAccount);\n zkApp.deploy();\n });\n await txn.prove();\n // this tx needs .sign(), because `deploy()` adds an account update that requires signature authorization\n await txn.sign([deployerKey, zkAppPrivateKey]).send();\n }\n\n it('generates and deploys the `Add` smart contract', async () => {\n await localDeploy();\n const num = zkApp.num.get();\n expect(num).toEqual(Field(1));\n });\n\n it('correctly updates the num state on the `Add` smart contract', async () => {\n await localDeploy();\n\n // update transaction\n const txn = await Mina.transaction(senderAccount, () => {\n zkApp.update();\n });\n await txn.prove();\n await txn.sign([senderKey]).send();\n\n const updatedNum = zkApp.num.get();\n expect(updatedNum).toEqual(Field(3));\n });\n});"
}
